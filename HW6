//nvcc HW6.cu -o bounce -lglut -lm -lGLU -lGL																													
//To stop hit "control c" in the window you launched it from.
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include <GL/glut.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <cuda.h>
#include <curand.h>
#include <curand_kernel.h>
#define NUMBER_OF_BALLS 20
#define PI 3.14159
using namespace std;
float TotalRunTime;
float RunTime;
float Dt;
float4 Position[NUMBER_OF_BALLS], Velocity[NUMBER_OF_BALLS], Force[NUMBER_OF_BALLS], Color[NUMBER_OF_BALLS];
float SphereMass;
float SphereDiameter;
float MaxVelocity;
int Trace;
int Pause;
int PrintRate;
int PrintCount;
// Units and universal constants
float MassUnitConverter;
float LengthUnitConverter;
float TimeUnitConverter;
float GavityConstant;
// Window globals
static int Window;
int XWindowSize;
int YWindowSize;
double Near;
double Far;
double EyeX;
double EyeY;
double EyeZ;
double CenterX;
double CenterY;
double CenterZ;
double UpX;
double UpY;
double UpZ;
// Prototyping functions
void Display();
void idle();
void reshape(int, int);
void KeyPressed(unsigned char, int, int);
void setInitailConditions();
void drawPicture();
void getForces();
void updatePositions();
void nBody();
void startMeUp();
void terminalPrint();
void Display()
{
	drawPicture();
}
void idle()
{
	if(Pause == 0) nBody();
}
void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
}
void KeyPressed(unsigned char key, int x, int y)
{
	// Turns tracers on and off
	if(key == 't')
	{
		if(Trace == 1) Trace = 0;
		else Trace = 1;
		drawPicture();
		terminalPrint();
	}
	if(key == 'p')
	{
		if(Pause == 1) Pause = 0;
		else Pause = 1;
		drawPicture();
		terminalPrint();
	}
	float dx = 0.05f; // Movement increment
	float dy = 0.05f; // Movement increment
	float dz = 0.05f; // Movement increment
	if(key == 'z')  // Move backward in the z direction
	{
		glTranslatef(0.0, 0.0, -dz);
		drawPicture();
		terminalPrint();
	}
	if(key == 'Z')  // Move forward in the z direction
	{
		glTranslatef(0.0, 0.0, dz);
		drawPicture();
	}
	if(key == 'a')  // Move left in the x direction
	{
		glTranslatef(-dx, 0.0, 0.0);
		drawPicture();
		terminalPrint();
	}
	if(key == 'd')  // Move right in the x direction
	{
		glTranslatef(dx, 0.0, 0.0);
		drawPicture();
	}
	if(key == 'w')  // Move up in the y direction
	{
		glTranslatef(0.0, dy, 0.0);
		drawPicture();
		terminalPrint();
	}
	if(key == 's')  // Move down in the y direction
	{
		glTranslatef(0.0, -dy, 0.0);
		drawPicture();
	}
	if(key == 'q')
	{
		glutDestroyWindow(Window);
		printf("\nExiting....\n\nGood Bye\n");
		exit(0);
	}
}
void setInitailConditions()
{
    time_t t;

    srand((unsigned) time(&t));
    float randomNumber;
    float sphereRadius;
    float separation;
    int test;
    float maxSphereSize = 10.0;  // New variable for sphere size
    float angle1, angle2, radius; // New variables for spherical coordinate angles

    MassUnitConverter = 9.383e20; // kg
    LengthUnitConverter = 940.0; // km
    TimeUnitConverter = 3642.0 / (60.0 * 60.0); // hr

    printf("\n MassUnitConverter = %e kilograms", MassUnitConverter);
    printf("\n LengthUnitConverter = %e kilometers", LengthUnitConverter);
    printf("\n TimeUnitConverter = %e hours", TimeUnitConverter);
    
    GavityConstant = 1.0;
    printf("\n The gravity constant = %f in our units", GavityConstant);
    
    SphereDiameter = 1.0;
    SphereMass = 1.0;
    sphereRadius = SphereDiameter / 2.0;    
    MaxVelocity = 5.0;
    
    printf("\n Max velocity = %f kilometers/hour or %f miles/hour", MaxVelocity * LengthUnitConverter / TimeUnitConverter, (MaxVelocity * LengthUnitConverter / TimeUnitConverter) * 0.621371);    
    printf("\n Sphere radius = %f kilometers", maxSphereSize * LengthUnitConverter);
    
    		//????????????????
    for (int i = 0; i < NUMBER_OF_BALLS; i++)
    {
        // Setting the balls randomly within a large sphere
        test = 0;
        while (test == 0)
        {
        //generate sphere coord
        radius = ((float)rand() / (float)RAND_MAX) * maxSphereSize; // Random radius within the sphere
            angle1 = ((float)rand() / (float)RAND_MAX) * 2.0 * PI; // Random azimuthal angle
            angle2 = ((float)rand() / (float)RAND_MAX) * PI; // Random polar angle

            Position[i].x = radius * sin(angle2) * cos(angle1);
            Position[i].y = radius * sin(angle2) * sin(angle1);
            Position[i].z = radius * cos(angle2);
            test = 1;
            for (int j = 0; j < i; j++)
            {
                separation = sqrt((Position[i].x - Position[j].x) * (Position[i].x - Position[j].x) +
                                  (Position[i].y - Position[j].y) * (Position[i].y - Position[j].y) +
                                  (Position[i].z - Position[j].z) * (Position[i].z - Position[j].z));
                if (separation < SphereDiameter)
                {
                    test = 0;
                    break;
                }
            }
        }        

        // Setting random velocities between -MaxVelocity and MaxVelocity
        randomNumber = (((float)rand() / (float)RAND_MAX) * 2.0 - 1.0) * MaxVelocity;
        Velocity[i].x = randomNumber;
        randomNumber = (((float)rand() / (float)RAND_MAX) * 2.0 - 1.0) * MaxVelocity;
        Velocity[i].y = randomNumber;
        randomNumber = (((float)rand() / (float)RAND_MAX) * 2.0 - 1.0) * MaxVelocity;
        Velocity[i].z = randomNumber;

        // Color of each asteroid
        Color[i].x = 0.35;
        Color[i].y = 0.22;
        Color[i].z = 0.16;

        Force[i].x = 0.0;
        Force[i].y = 0.0;
        Force[i].z = 0.0;
    }    

    TotalRunTime = 10.0 * 24.0 / TimeUnitConverter;
    RunTime = 0.0;
    Dt = 0.001;
    // How many time steps between terminal prints
    PrintRate = 10;
}
void drawPicture()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Drawing balls
    for (int i = 0; i < NUMBER_OF_BALLS; i++)
    {
        glColor3f(Color[i].x, Color[i].y, Color[i].z);
        glPushMatrix();
            glTranslatef(Position[i].x, Position[i].y, Position[i].z);
            glutSolidSphere(SphereDiameter / 2.0, 30, 30); // Diameter divided by 2 for radius
        glPopMatrix();
    }

    glutSwapBuffers(); // Swap buffers to display the drawn image
}
void getForces()
{
    // Variables for non-elastic collisions
    float inOut;
    float kSphereReduction;
    float dvx, dvy, dvz;
    float kSphere;
    float sphereRadius = SphereDiameter / 2.0;
    float d, dx, dy, dz;
    float magnitude;

    // Initialize forces to zero
    for (int i = 0; i < NUMBER_OF_BALLS; i++)
    {
        Force[i].x = 0.0;
        Force[i].y = 0.0;
        Force[i].z = 0.0;
    }
    kSphere = 1000.0;
    kSphereReduction = 0.8; // Reduction factor for non-elastic collisions

    for (int i = 0; i < NUMBER_OF_BALLS; i++)
    {
        for (int j = 0; j < i; j++)
        {
            dx = Position[j].x - Position[i].x;
            dy = Position[j].y - Position[i].y;
            dz = Position[j].z - Position[i].z;
            d = sqrt(dx * dx + dy * dy + dz * dz);
            // ?????????????????????????????????????????????????????
			// This causes the asteroids to bounce off of each other elastically.
			// Make this a nonelastic bounce.
			// Make two local variable inOut and kSphereReduction and fix this problem.
			// You will also need local variables dvx, dvy, dvz.
			// Also check and see if the seperation is less than the radius.
			// If it is print out a note to make your repultion stronger and termenate the program.

            if (d < SphereDiameter)
            {
                // Calculate inOut based on overlap
                inOut = SphereDiameter - d;

                // Adjust force magnitude by kSphereReduction to simulate inelasticity
                magnitude = kSphere * inOut * kSphereReduction;
                dvx = Velocity[j].x - Velocity[i].x;
                dvy = Velocity[j].y - Velocity[i].y;
                dvz = Velocity[j].z - Velocity[i].z;

                // Check if spheres are too close
                if (d < sphereRadius)
                {
                    printf("\nSpheres %d and %d are too close (distance: %f). Adjust the repulsion force!\n", i, j, d);
                    exit(0);
                }
             // Calculate the force vector components
                Force[i].x -= magnitude * (dx / d);
                Force[i].y -= magnitude * (dy / d);
                Force[i].z -= magnitude * (dz / d);
                Force[j].x += magnitude * (dx / d);
                Force[j].y += magnitude * (dy / d);
                Force[j].z += magnitude * (dz / d);
            }

            // Gravity force calculation
            magnitude = GavityConstant * SphereMass * SphereMass / (d * d);
            Force[i].x += magnitude * (dx / d);
            Force[i].y += magnitude * (dy / d);
            Force[i].z += magnitude * (dz / d);

            Force[j].x -= magnitude * (dx / d);
            Force[j].y -= magnitude * (dy / d);
            Force[j].z -= magnitude * (dz / d);
        }
    }
}
void updatePositions()
{
	for(int i = 0; i < NUMBER_OF_BALLS; i++)
	{
		// These are the LeapFrog formulas.
		if(RunTime == 0.0)
		{
			Velocity[i].x += (Force[i].x/SphereMass)*(Dt/2.0);
			Velocity[i].y += (Force[i].y/SphereMass)*(Dt/2.0);
			Velocity[i].z += (Force[i].z/SphereMass)*(Dt/2.0);
		}
		else
		{
			Velocity[i].x += (Force[i].x/SphereMass)*Dt;
			Velocity[i].y += (Force[i].y/SphereMass)*Dt;
			Velocity[i].z += (Force[i].z/SphereMass)*Dt;
		}

		Position[i].x += Velocity[i].x*Dt;
		Position[i].y += Velocity[i].y*Dt;
		Position[i].z += Velocity[i].z*Dt;
	}
}
void nBody()
{	
	getForces();
	updatePositions();
	drawPicture();
	
	RunTime += Dt;
	PrintCount++;	
	if(PrintCount == PrintRate)
	{
		terminalPrint();
		PrintCount = 0;
	}	
	if(TotalRunTime < RunTime)
	{
		glutDestroyWindow(Window);
		printf("\n Later Dude \n");
		exit(0);
	}
}
void startMeUp() 
{	
	// The Rolling Stones
	// Tattoo You: 1981
	Trace = 0;
	Pause = 1;
	PrintCount = 0;
	setInitailConditions();
	printf("\033[0;31m\n\n The simulation is paused. Type p in the simulation window to start it. \n");
	printf("\033[0m");
}
void terminalPrint()
{
	//default  \033[0m
	//Black:   \033[0;30m
	//Red:     \033[0;31m
	//Green:   \033[0;32m
	//Yellow:  \033[0;33m
	//Blue:    \033[0;34m
	//Magenta: \033[0;35m
	//Cyan:    \033[0;36m
	//White:   \033[0;37m
	
	printf("\033[0;30mThis text is black.\033[0m\n");	
	//BOLD_ON  "\e[1m"
	//BOLD_OFF   "\e[m"
	system("clear");
	printf("\n Move up with a");
	printf("\n Move down with w");
	printf("\n Move left with s");
	printf("\n Move right with d");
	printf("\033[0m");
	printf("\n t: Trace on/off toggle --> ");
	printf(" Tracing is:");
	if (Trace == 1) 
	{
		printf("\e[1m" " \033[0;32mON\n" "\e[m");
	}
	else 
	{
		printf("\e[1m" " \033[0;31mOFF\n" "\e[m");
	}	
	printf("\033[0m");
	printf(" p: pause on/off toggle --> ");
	printf(" The simulation is:");
	if (Pause == 1) 
	{
		printf("\e[1m" " \033[0;31mPaused\n" "\e[m");
	}
	else 
	{
		printf("\e[1m" " \033[0;32mRunning\n" "\e[m");
	}	
	printf(" q: Terminates the simulation");
	// Print the time out in hours.
	printf("\n\n Time = %f \033[0;34mhours", RunTime*TimeUnitConverter);
	printf("\033[0m");
	printf("\n");
}
int main(int argc, char** argv)
{
	startMeUp();	
	XWindowSize = 1000;
	YWindowSize = 1000; 
	Near = 0.2;
	Far = 50.0*SphereDiameter;
	EyeX = 0.0;
	EyeY = 0.0;
	EyeZ = 15.0*SphereDiameter;
	CenterX = 0.0;
	CenterY = 0.0;
	CenterZ = 0.0;
	UpX = 0.0;
	UpY = 1.0;
	UpZ = 0.0;
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH | GLUT_RGB);
	glutInitWindowSize(XWindowSize,YWindowSize);
	glutInitWindowPosition(5,5);
	Window = glutCreateWindow("Particle In A Box");
	gluLookAt(EyeX, EyeY, EyeZ, CenterX, CenterY, CenterZ, UpX, UpY, UpZ);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(-0.2, 0.2, -0.2, 0.2, Near, Far);
	glMatrixMode(GL_MODELVIEW);	
	glClearColor(0.0, 0.0, 0.0, 0.0);		
	GLfloat light_Position[] = {1.0, 1.0, 1.0, 0.0};
	GLfloat light_ambient[]  = {0.0, 0.0, 0.0, 1.0};
	GLfloat light_diffuse[]  = {1.0, 1.0, 1.0, 1.0};
	GLfloat light_specular[] = {1.0, 1.0, 1.0, 1.0};
	GLfloat lmodel_ambient[] = {0.2, 0.2, 0.2, 1.0};
	GLfloat mat_specular[]   = {1.0, 1.0, 1.0, 1.0};
	GLfloat mat_shininess[]  = {10.0};
	glShadeModel(GL_SMOOTH);
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
	glLightfv(GL_LIGHT0, GL_POSITION, light_Position);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_DEPTH_TEST);	
	glutDisplayFunc(Display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(KeyPressed);
	//glutMouseFunc(mymouse);
	glutIdleFunc(idle);
	glutMainLoop();	
	return 0;
}
